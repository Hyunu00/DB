/*마당서점 도서의 총수 */
select count(*) from book;
/* 마당서점에 도서를 출고하는 출판사의 총*/
select count(Distinct publisher) from book;
/*모든 고객의 . 주소*/
select name,address from customer;
/*  2020 년 월 ~7 월 일 사이에 주문받은 도서의 주문번호*/
select orderid from orders where orderdate BETWEEN '20/07/04' AND '20/07/07';
/* 2020 년 월 나일 ~7 월 일 시이에 주문받은 도서를 제외한 도서의 주문번호*/
select orderid from orders where orderdate NOT BETWEEN '20/07/04' AND '20/07/07';
/*성이 김씨인 고객의 과주소*/
select name,address from customer where substr(name,0,1)='김';
/*성이 김· 씨이고 이 아로 나는 고객의 이름과 주소 */
select name,address from customer where substr(name,0,1)='김' AND substr(name,-1)='아';


/*5 박지성이 구매한 도서의 출판사 수 */
select count(bok.publisher)"출판사 수" from orders odr,customer cust,book bok where cust.custid=odr.custid and cust.name like '박지성' and bok.bookid=odr.bookid; 
/*6 박지성이 구매한 도서의 이름,가격,정가와 판매가격의 차이 price-saleprice*/ 
select bok.bookname,bok.price,ord.saleprice,(bok.price-ord.saleprice)"정가와 판매가 차이" from orders ord,customer cust,book bok where cust.custid=ord.custid and cust.name like '박지성' and bok.bookid=ord.bookid;
/*7 박지성이 구매하지 않은 도서의 이름*/
select Distinct bok.bookname 
from orders ord,customer cust,book bok 
where not cust.custid=ord.custid and cust.name like '박지성' 
and bok.bookid=ord.bookid;
/*not exists 사용*/

/*8 주문하지 않은 고객의 이름*/
select cust.name from customer cust 
where cust.custid not in (select Distinct ord.custid 
from orders ord);
/*not in 사용*/

/*9 주문 금액의 총액과 주문의 평균 금액*/
select sum(saleprice)"총합",avg(saleprice)"평균" from orders;

/*10 고객의 이름과 고객별 구매액*/
select name,sum(saleprice) from customer,orders where orders.custid=customer.custid group by name;

/*11 고객의 이름과 고객이 구매한 도서목록*/
select name,bookname from book,orders,customer where book.bookid=orders.bookid and orders.custid=customer.custid;

/*12 도서의 가격과 판매가격의 차이가 가장 많은 주문*/
select * from book,orders where book.bookid=orders.bookid and price-saleprice = (select max(price-saleprice) from book,orders where book.bookid = orders.bookid);
/*13 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름 */
select name,avg(saleprice) from customer,orders where customer.custid=orders.custid group by name having avg(saleprice)>(select avg(saleprice) from orders); 
